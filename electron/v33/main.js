// Fully generated by Claude :D

const { app, BrowserWindow, ipcMain } = require('electron')
const path = require('path')
const { Curl } = require('node-libcurl')

function createWindow() {
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
    },
  })

  mainWindow.loadFile('index.html')
}

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// Handle the curl request in the main process
ipcMain.handle('make-curl-request', async (event, url) => {
  return new Promise((resolve, reject) => {
    const curl = new Curl()
    const output = []
    const debugOutput = []

    curl.setOpt('URL', url)
    curl.setOpt('VERBOSE', true)

    // Add debug function to capture verbose output
    curl.setOpt('DEBUGFUNCTION', (type, data) => {
      // First check for known safe patterns
      if (
        /^[<>*] /.test(data) || // Matches curl's text debug prefixes
        /^{ /.test(data) || // JSON data
        /^[A-Za-z]+: /.test(data) // Headers
      ) {
        debugOutput.push(data)
        return 0
      }

      // Try to detect if the data is valid UTF-8 text
      try {
        // Check if data contains only printable characters
        if (/^[\x20-\x7E\r\n\t]*$/.test(data)) {
          debugOutput.push(data)
        } else {
          // If it contains non-printable characters, show as binary
          debugOutput.push(`[Binary data: ${data.length} bytes]`)
        }
      } catch (e) {
        // If any error in parsing, treat as binary
        debugOutput.push(`[Binary data: ${data.length} bytes]`)
      }
      return 0
    })

    curl.on('data', function (chunk) {
      output.push(chunk.toString())
    })

    curl.on('end', function (statusCode) {
      curl.close()
      resolve({
        status: statusCode,
        data: output.join(''),
        debug: debugOutput.join('\n'),
      })
    })

    curl.on('error', function (error) {
      curl.close()
      reject(error)
    })

    curl.perform()
  })
})
